//classe respons√°vel por construir os textos e bot√µes exibidos para o usu√°rio

const moment = require('moment');

var self = module.exports = {
    ABOUT: 0,
    INITIAL: 1,
    NOTIFICATIONS: 2,
    BNDLIST: 3,
    BNDFULL: 4,
    NOTIPAUSE: 5,
    NOTILIST: 6,
    NOTITOGGLE: 7,

    prepare: prepare,
    prepareForEdit: prepareForEdit,
    getDigestTitle: getDigestTitle,
    getDigestEntry: getDigestEntry    
};

//preparar alguma mensagem (e teclado de resposta) para envio
function prepare(index, params) {
    let wrapper = {};
    wrapper.opts = {};
    wrapper.opts.parse_mode = "Markdown";
    wrapper.opts.reply_markup = {};

    switch(index) {
        case self.ABOUT:
            wrapper.text = `üîπ            *BandexBot  v0.8*            üîπ
üîπ by @akafts and USPCodeLab at *IME-USP* üîπ

üñ• Quer fazer sistemas como este? Participe do *USPCodeLab*!
üåé C√≥digo dispon√≠vel no meu GitHub (@akafts)

üëç *Curtiu? Repasse pros amigos!* üëç
`;
            wrapper.opts.reply_markup.inline_keyboard = [
                [
                    {
                        text: '‚¨ÖÔ∏è Voltar',
                        callback_data: 'DUPE_INITIAL'
                    }
                ]
            ]; 
            break;

        case self.INITIAL:
            wrapper.text = `*Bem-vindo ao BandexBot!* Em que posso ajudar?`;
            wrapper.opts.reply_markup.inline_keyboard = [
                [
                    {
                        text: '‚òÄÔ∏è Ver Almo√ßo',
                        callback_data: 'BNDLIST_ALMOCO_0'
                    },
                    {
                        text: 'üåô Ver Janta',
                        callback_data: 'BNDLIST_JANTA_0'
                    }
                ],
                [
                    {
                        text: '‚öôÔ∏è Gerenciar Notifica√ß√µes',
                        callback_data: 'NOTIFICATIONS'
                    }
                ],
                [
                    {
                        text: '‚ÑπÔ∏è Sobre o BandexBot',
                        callback_data: 'ABOUT'
                    }
                ]
            ];
            break;

        case self.BNDLIST:
            wrapper.text = (params.time == "ALMOCO") ? "‚òÄÔ∏è *Ver Almo√ßo*" : "üåô *Ver Janta*";
            wrapper.text += "\nSelecione um bandej√£o:";
            wrapper.opts.reply_markup.inline_keyboard = buildBandexList(params.list, 
                `BNDLIST_${params.time}_${params.page}`, `BNDFULL_${params.time}_`, "INITIAL");
            break;

        case self.BNDFULL:
            wrapper.text = buildMenu(params.menu);
            wrapper.opts.reply_markup.inline_keyboard = [
                [
                    {
                        text: '‚¨ÖÔ∏è Voltar',
                        callback_data: `DUPE_BNDLIST_${params.time}_0`
                    }
                ]
            ];
            break;

        case self.NOTIFICATIONS:
            let optext;
            wrapper.text = `‚öôÔ∏è *Gerenciar Notifica√ß√µes*\n`;        
            if(params.paused) {
                wrapper.text += `Suas notifica√ß√µes est√£o pausadas. Clique em *Resumir Notifica√ß√µes* para lig√°-las de novo.`;
                optext = '‚ñ∂Ô∏è Resumir Notifica√ß√µes';
            }
            else {
                wrapper.text += `Voc√™ pode configurar suas notifica√ß√µes para almo√ßo e janta, ou desligar todas por um tempo.`;
                optext = '‚è∏ Pausar Notifica√ß√µes';
            }

            wrapper.opts.reply_markup.inline_keyboard = [
                [
                    {
                        text: '‚òÄÔ∏è Almo√ßo',
                        callback_data: 'NOTILIST_ALMOCO_0'
                    },
                    {
                        text: 'üåô Janta',
                        callback_data: 'NOTILIST_JANTA_0'
                    }
                ],           
                [
                    {
                        text: optext,
                        callback_data: 'NOTIPAUSE'
                    }
                ],            
                [
                    {
                        text: '‚¨ÖÔ∏è Voltar',
                        callback_data: 'BACK_INITIAL'
                    }
                ]
            ]; 
            break;

        case self.NOTIPAUSE:
            if(params.paused)
                wrapper.text = `‚è∏ *Pausar Notifica√ß√µes*\nSuas notifica√ß√µes foram pausadas.`;
            else
                wrapper.text = `‚ñ∂Ô∏è *Resumir Notifica√ß√µes*\nSuas notifica√ß√µes foram resumidas.`;
            wrapper.opts.reply_markup.inline_keyboard = [          
                [
                    {
                        text: '‚¨ÖÔ∏è Voltar',
                        callback_data: 'BACK_NOTIFICATIONS'
                    }
                ]
            ]; 
            break;

        case self.NOTILIST:
            if(params.time == "ALMOCO") {
                wrapper.text = "‚òÄÔ∏è *Notifica√ß√µes de Almo√ßo*\nToque em um bandej√£o para ligar ou desligar as notifica√ß√µes dele.\n " 
                    + "Voc√™ receber√° uma notifica√ß√£o com o card√°pio dos bandej√µes selecionados *todos os dias √∫teis √†s 11h30*.";
            }
            else {
                wrapper.text = "üåô *Notifica√ß√µes de Janta*\nToque em um bandej√£o para ligar ou desligar as notifica√ß√µes dele.\n " 
                    + "Voc√™ receber√° uma notifica√ß√£o com o card√°pio dos bandej√µes selecionados *todos os dias √∫teis √†s 18h30*.";                
            }
            wrapper.opts.reply_markup.inline_keyboard = buildBandexList(params.list, 
                `NOTILIST_${params.time}_${params.page}`, `NOTITOGGLE_${params.time}_${params.page}_`, "NOTIFICATIONS");
            break;
    }
    return wrapper;
}

//prepara a mensagem e o teclado, mas adiciona campos extras para edi√ß√£o de mensagem
function prepareForEdit(index, msg, params) {
    let wrapper = prepare(index, params);

    wrapper.opts.chat_id = msg.chat.id;
    wrapper.opts.message_id = msg.message_id;
    return wrapper;
}

//prepara um keyboard de sele√ß√£o de bandej√µes, com 6 bandej√µes por pagina
//recebe a lista de bandejoes, o estado atual, um prefixo para o callback_data, e o estado para onde voltar
function buildBandexList(list, state, preffix, back) {
    let splitter = state.split("_");
    let keyboard = [];
    let row;
    let page = +splitter[2];
    let index = page*6;
    let text;

    //adicionamos os bandejoes, de 2 em 2
    while(index < (page+1)*6 && index < 16) {
        row = [];
        text = list[index].name;
        if(typeof list[index].subscribed != "undefined") {
            if(list[index].subscribed) 
                text = "üîî " + text;
            else
                text = "üîï " + text;
        }
        row.push({
            text: text,
            callback_data: preffix+list[index].code
        });
        text = list[index+1].name;
        if(typeof list[index+1].subscribed != "undefined") {
            if(list[index+1].subscribed) 
                text = "üîî " + text;
            else
                text = "üîï " + text;
        }
        row.push({
            text: text,
            callback_data: preffix+list[index+1].code
        });  
        keyboard.push(row);    
        index += 2;          
    }

    //adicionar pagina√ßao
    row = [];
    if(page > 0)
        row.push({
            text: "‚óÄÔ∏è Anterior",
            callback_data: `${splitter[0]}_${splitter[1]}_${page-1}`
        });

    if(page < 2)
        row.push({
            text: "‚ñ∂Ô∏è Pr√≥ximo",
            callback_data: `${splitter[0]}_${splitter[1]}_${page+1}`
        });
    keyboard.push(row);


    //adicionar voltar
    row = [];
    row.push({
        text: "‚¨ÖÔ∏è Voltar",
        callback_data: "BACK_" + back
    });
    keyboard.push(row);

    return keyboard;
}

//recebe o menu e prepara sua exibi√ßao
function buildMenu(menu) {
    let text = `üç± *CARD√ÅPIO DE HOJE* (${menu.date} - ${menu.time}) üç±
        üèõ *${menu.place}* üèõ`;

    if(menu.foods.length > 3) {
        text += `

        üçö  ${menu.foods[0]}
        üçó  ${menu.foods[1]}
        üåø  ${menu.foods[2]}
        üç†  ${menu.foods[3]}
        ü•ó  ${menu.foods[4]}
        üéÇ  ${menu.foods[5]}
        üçû  ${menu.foods[6]}
        `;
    }
    else {
        text += `

        üö´ Nada consta, provavelmente fechado üö´
        `;
    }
    return text;
}


//gera uma mensagem que ser√° o cabe√ßalho do digest de notifica√ß√£o
function getDigestTitle(time) {
    date = moment().format('dddd');
    time = (time == 0) ? "Almo√ßo" : "Janta";
    return `üåÆ *HOJE NO BANDEJ√ÉO* (${date} - ${time}) üåÆ\n\n`;
}

//gera um pequeno texto a partir de um menu de um bandej√£o
function getDigestEntry(menu) {
    let text = `        üèõ *${menu.place}* üèõ\n`;

    if(menu.foods.length > 3) {
        text += `       üçö  ${menu.foods[0]}
        üçó  ${menu.foods[1]}
        üåø  ${menu.foods[2]}
        üç†  ${menu.foods[3]}
        ü•ó  ${menu.foods[4]}
        üéÇ  ${menu.foods[5]}
        üçû  ${menu.foods[6]}\n\n`;
    }
    else {
        text += `       üö´ Nada consta, provavelmente fechado üö´\n\n`;
    }
    return text;
}